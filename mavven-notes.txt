-Maven is a software project management and comprehension tool. 
-Based on the concept of a project object model (POM).
-Maven helps in
	-Build process - Maven builds projects using POM and a set of plugins.
	-Managing Multiple jars
	-Dependency management and versions
	-Project structure
	-Building, Publishing and Deploying
	-Project information - unit test reports

-------------------------- PROJECT ---------------------

		## CREATING PROJECT

# mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app
-this will generate POM and src folder structure
- The src/main/java directory contains the project source code, the src/test/java directory contains the test source, and the pom.xml file is the project's Project Object Model, or POM.

		## BUILDING

- go inside app and run
# mvn compile
- this will generate target directory. The compiled classes are placed in ${basedir}/target/classes

		## TESTING

# mvn test

		## PACKAGING

# mvn package
- this will build the project  and create JAR in /target folder and run junit test cases

# java -cp target/MavenTestApp-1.0-SNAPSHOT.jar com.mycompany.myapp.App
- to run the app

		## INSTALLING

- Now you'll want to install the artifact you've generated (the JAR file) in your local repository (${user.home}/.m2/repository is the default location). 
# mvn install


-------------------------- DESCRIPTION --------------------------

-Plugin: is a collection of goals with a general common purpose. For example the jboss-maven-plugin, whose purpose is "deal with various jboss items"

-Archetype: is the plugin that provides the goal. This archetype:generate goal created a simple project based upon a maven-archetype-quickstart archetype.

-POM - contains information required to build a project

	- project : top-level element 

	- modelVersion : indicates what version of the object model this POM is using. 

	- groupId : indicates the unique identifier of the organization or group that created the project. The groupId is one of the key identifiers of a project and is typically based on the fully qualified domain name of your organization. For example org.apache.maven.plugins is the designated groupId for all Maven plugins.

	- artifactId : indicates the unique base name of the primary artifact being generated by this project. The primary artifact for a project is typically a JAR file. A typical artifact produced by Maven would have the form <artifactId>-<version>.<extension> (for example, myapp-1.0.jar).

	- version : indicates the version of the artifact. Two types of version:

		-- the SNAPSHOT designator in a version, indicates that a project is in a state of development. During the release process, a version of x.y-SNAPSHOT changes to x.y. The release process also increments the development version to x.(y+1)-SNAPSHOT. For example, version 1.0-SNAPSHOT is released as version 1.0, and the new development version is version 1.1-SNAPSHOT.

		-- The code in a 'release' version (any version value without the suffix SNAPSHOT) is unchanging.

	- name : indicates the display name used for the project. This is often used in Maven's generated documentation.
	- Dependency: by default it includes junit. If junit is dependent on some other jar then, we wont have to worry about mentioning in POM. Maven takes care of related dependencies. We only need to mention the jars that we need as a first entry point. 
	- build : handles things like declaring your project's directory structure and managing plugins.


-Phase : is a step in the build lifecycle, which is an ordered sequence of phases. 


-Common default lifecycle phases executed
	- package: take the compiled code and package it in its distributable format, such as a JAR.
	- install: install the package into the local repository(.m2/repository/), for use as a dependency in other projects locally
	- clean: cleans up artifacts created by prior builds. This will remove the target directory with all the build data before starting so that it is fresh.

-Plugins: Whenever you want to customise the build for a Maven project, this is done by adding or reconfiguring plugins.

- Resources: any directories or files placed within the ${basedir}/src/main/resources directory are packaged in your JAR with the exact same structure starting at the base of the JAR.


